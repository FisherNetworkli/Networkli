generator client {
  provider        = "prisma-client-js"
  output          = "../app/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model Interest {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  UserInterest UserInterest[]

  @@schema("public")
}

model UserInterest {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  interestId String   @map("interest_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  @@unique([userId, interestId])
  @@schema("public")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model BlogPost {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  slug      String   @unique
  content   String
  excerpt   String
  image     String
  category  String
  tags      String[]
  readTime  String
  author    String
  date      DateTime @default(now())
  published Boolean  @default(false)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@schema("public")
}

model ContactSubmission {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus @default(UNREAD)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt

  @@schema("public")
}

model JobApplication {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  email       String
  phone       String
  position    String
  experience  String
  resume      String
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt

  @@schema("public")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role           @default(USER)
  Account       Account[]
  BlogPost      BlogPost[]
  Session       Session[]
  Content       Content[]
  UserInterest  UserInterest[]

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

model Content {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  slug        String    @unique
  content     String
  type        String
  status      String    @default("DRAFT")
  tags        String[]  @default([])
  authorId    String    @map("author_id") @db.Uuid
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  author      User      @relation(fields: [authorId], references: [id])

  @@schema("public")
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED

  @@schema("public")
}

enum ContactStatus {
  UNREAD
  READ
  REPLIED

  @@schema("public")
}

enum Role {
  USER
  ADMIN

  @@schema("public")
}
